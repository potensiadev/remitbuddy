/sendhome-mvp/
├─ /components/
│    ├─ CountrySelect.tsx
│    ├─ AmountInput.tsx
│    ├─ ProviderCard.tsx 
│    ├─ ResultList.tsx
│    └─ Spinner.tsx
├─ /lib/
│    ├─ api.ts
│    └─ uuid.ts
├─ /pages/
│    ├─ _app.tsx
│    └─ index.tsx
├─ /public/
│    └─ logo.svg
├─ /styles/
│    └─ globals.css
├─ tailwind.config.js
├─ next.config.js
├─ package.json
└─ tsconfig.json

{
  "name": "sendhome-mvp",
  "version": "1.0.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start"
  },
  "dependencies": {
    "next": "^14.0.0",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "tailwindcss": "^3.4.0",
    "autoprefixer": "^10.4.0",
    "postcss": "^8.4.0",
    "uuid": "^9.0.0"
  },
  "devDependencies": {
    "typescript": "^5.0.0",
    "@types/react": "^18.0.0",
    "@types/node": "^20.0.0"
  }
}

/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./pages/**/*.{js,ts,jsx,tsx}",
    "./components/**/*.{js,ts,jsx,tsx}"
  ],
  theme: {
    extend: {},
  },
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

{
  "compilerOptions": {
    "target": "esnext",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx"],
  "exclude": ["node_modules"]
}

@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  @apply bg-gray-50 text-gray-900;
}

import { v4 as uuidv4 } from "uuid";

export function getOrCreateUUID(): string {
  if (typeof window === "undefined") return "";
  let uuid = localStorage.getItem("sendhome-uuid");
  if (!uuid) {
    uuid = uuidv4();
    localStorage.setItem("sendhome-uuid", uuid);
  }
  return uuid;
}

export async function fetchRemittanceQuote(params: {
  receive_country: string;
  receive_currency: string;
  send_amount: number;
  send_currency: string;
}) {
  const url = `/api/getRemittanceQuote?receive_country=${encodeURIComponent(params.receive_country)}&receive_currency=${encodeURIComponent(params.receive_currency)}&send_amount=${params.send_amount}&send_currency=${encodeURIComponent(params.send_currency)}`;
  const res = await fetch(url);
  if (!res.ok) {
    const error = await res.json().catch(() => ({}));
    throw new Error(error.error || "API Error");
  }
  return res.json();
}

export async function logEvent(event: any) {
  try {
    await fetch("/api/log", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(event),
    });
  } catch (e) {
    // Ignore logging errors
  }
}

export default function Spinner() {
  return (
    <div className="flex justify-center items-center py-8">
      <svg className="animate-spin h-8 w-8 text-blue-500" viewBox="0 0 24 24">
        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4" fill="none"/>
        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v8z"/>
      </svg>
    </div>
  );
}

import React from "react";

const COUNTRIES = [
  { name: "Vietnam", currency: "VND" },
  { name: "Philippines", currency: "PHP" },
  { name: "Cambodia", currency: "KHR" },
  { name: "Nepal", currency: "NPR" },
  { name: "Myanmar", currency: "MMK" },
  { name: "Thailand", currency: "THB" },
  { name: "Uzbekistan", currency: "UZS" },
  { name: "Indonesia", currency: "IDR" },
  { name: "Sri Lanka", currency: "LKR" },
  { name: "Bangladesh", currency: "BDT" },
];

type Props = {
  value: string;
  onChange: (country: string) => void;
};

export default function CountrySelect({ value, onChange }: Props) {
  return (
    <select
      className="w-full rounded-lg border px-4 py-3 text-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
      value={value}
      onChange={e => onChange(e.target.value)}
    >
      <option value="">Select Country</option>
      {COUNTRIES.map(c => (
        <option key={c.name} value={c.name}>
          {c.name} ({c.currency})
        </option>
      ))}
    </select>
  );
}

export function getCurrencyByCountry(country: string) {
  return COUNTRIES.find(c => c.name === country)?.currency || "";
}

type AmountInputProps = {
  value: number;
  onChange: (val: number) => void;
  currency: string;
};

export default function AmountInput({ value, onChange, currency }: AmountInputProps) {
  return (
    <input
      type="number"
      min={1}
      className="w-full rounded-lg border px-4 py-3 text-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
      value={value}
      onChange={e => onChange(Number(e.target.value))}
      placeholder={`Enter amount (${currency})`}
    />
  );
}

type Provider = {
  provider: string;
  exchange_rate: number;
  fee: number;
  recipient_gets: number;
  transfer_method: string;
  link: string;
};

type Props = {
  data: Provider;
  isBest?: boolean;
  onClick: () => void;
};

export default function ProviderCard({ data, isBest, onClick }: Props) {
  return (
    <div
      className={`rounded-xl border p-4 mb-3 shadow-sm bg-white flex flex-col ${isBest ? "border-blue-500 ring-2 ring-blue-300" : "border-gray-200"}`}
      onClick={onClick}
      role="button"
      tabIndex={0}
    >
      <div className="flex justify-between items-center">
        <div className="font-bold text-lg">{data.provider}</div>
        {isBest && (
          <span className="bg-blue-500 text-white text-xs px-2 py-1 rounded">Best Rate</span>
        )}
      </div>
      <div className="mt-2 flex flex-col gap-1">
        <div>
          <span className="font-semibold">Receive:</span>{" "}
          <span className="text-blue-600 font-bold">{data.recipient_gets.toLocaleString(undefined, { maximumFractionDigits: 2 })}</span>
        </div>
        <div>
          <span className="font-semibold">Fee:</span> {data.fee.toLocaleString()} KRW
        </div>
        <div>
          <span className="font-semibold">Exchange Rate:</span> {data.exchange_rate}
        </div>
        <div>
          <span className="font-semibold">Method:</span> {data.transfer_method}
        </div>
      </div>
      <a
        href={data.link}
        target="_blank"
        rel="noopener noreferrer"
        className="mt-3 text-blue-500 underline text-sm"
        onClick={e => e.stopPropagation()}
      >
        Go to Provider
      </a>
    </div>
  );
}

import ProviderCard from "./ProviderCard";

type Provider = {
  provider: string;
  exchange_rate: number;
  fee: number;
  recipient_gets: number;
  transfer_method: string;
  link: string;
};

type Props = {
  results: Provider[];
  bestProvider: Provider;
  onProviderClick: (provider: string) => void;
};

export default function ResultList({ results, bestProvider, onProviderClick }: Props) {
  return (
    <div className="mt-6">
      {results
        .sort((a, b) => b.recipient_gets - a.recipient_gets)
        .map((p, idx) => (
          <ProviderCard
            key={p.provider}
            data={p}
            isBest={p.provider === bestProvider.provider}
            onClick={() => onProviderClick(p.provider)}
          />
        ))}
    </div>
  );
}

